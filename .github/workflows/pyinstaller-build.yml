name: Build GUI with PyInstaller

on:
  push:
    branches: [ main ]
    paths:
      - '**.py'
      - '1fichier_gui.spec'
      - 'requirements.txt'
      - '.github/workflows/pyinstaller-build.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        default: '3.12'
      build-mode:
        description: 'normal or clean'
        required: false
        default: 'normal'

jobs:
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh
    env:
      SPEC_FILE: 1fichier_gui.spec
      DIST_NAME: 1fichier_gui
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ github.event.inputs.python-version || '3.12' }}

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~\AppData\Local\pip\Cache
          key: pip-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if (Test-Path requirements.txt) { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Show versions
        run: |
          python --version
          pyinstaller --version

      - name: Optional clean
        if: ${{ github.event.inputs.build-mode == 'clean' }}
        run: |
          Remove-Item -Recurse -Force build,dist -ErrorAction SilentlyContinue
          Get-ChildItem -Recurse -Filter *.spec | ForEach-Object { Write-Host "Spec: $($_.FullName)" }

      - name: Build (spec)
        run: |
          if (-not (Test-Path $env:SPEC_FILE)) { Write-Error "Spec file '$env:SPEC_FILE' not found" }
          pyinstaller $env:SPEC_FILE --noconfirm

      - name: List dist
        run: |
          Get-ChildItem -Recurse .\dist | Select-Object FullName,Length | Format-Table -AutoSize
      - name: Locate exe
        id: locate
        run: |
          if (-not (Test-Path dist)) { Write-Error 'dist folder not created' }
          $exe = Get-ChildItem dist -Filter "${{ env.DIST_NAME }}.exe" -File -Recurse | Select-Object -First 1 -ExpandProperty FullName
          if (-not $exe) {
            # Maybe one-folder mode: look for subfolder then exe inside
            $folder = Get-ChildItem dist | Where-Object { $_.PsIsContainer } | Select-Object -First 1 -ExpandProperty FullName
            if ($folder) {
              $attempt = Join-Path $folder "${{ env.DIST_NAME }}.exe"
              if (Test-Path $attempt) { $exe = $attempt }
            }
          }
          if (-not $exe) { Write-Error 'Executable not found after build.' }
          echo "EXE_PATH=$exe" >> $env:GITHUB_ENV
          Write-Host "Found EXE: $exe"

      - name: Upload executable artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DIST_NAME }}-win64-exe
          path: ${{ env.EXE_PATH }}
          if-no-files-found: error

      - name: (Optional) Draft release on tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          files: ${{ env.EXE_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish timestamped release (push on main)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $sha = $env:GITHUB_SHA.Substring(0,7)
          $ts = (Get-Date).ToUniversalTime().ToString('yyyyMMddHHmm')
          $tag = $ts
          # Ensure uniqueness if multiple builds in same minute
          gh release view $tag 2>$null
          if ($LASTEXITCODE -eq 0) { $tag = "$ts-$env:GITHUB_RUN_NUMBER" }
          Write-Host "Creating release tag: $tag"
          gh release create $tag $env:EXE_PATH --title "Build $tag" --notes "Automated build for commit $sha (run #$env:GITHUB_RUN_NUMBER)" --latest
